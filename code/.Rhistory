library(tidyverse)
library(ggplot2)
HousePrices2020 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2020.csv", col_names = FALSE)
HousePrices2021 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2021.csv", col_names = FALSE)
HousePrices2022 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2022.csv", col_names = FALSE)
HousePrices2023 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2023.csv", col_names = FALSE)
HousePrices2024 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2024.csv", col_names = FALSE)
colnames(HousePrices2020) <- c(
#test relationships between price and variables like year, property type, and district.
#Correlation: Price vs Year (numeric)
cleanHousePrices %>%
mutate(Year = as.numeric(Year)) %>%
summarise(correlation = cor(price, Year, use = "complete.obs"))
#ANOVA: Is Price significantly different across property_type?
anova_result <- aov(price ~ property_type, data = cleanHousePrices)
# Assign the same column names to the rest
colnames(HousePrices2021) <- colnames(HousePrices2020)
colnames(HousePrices2022) <- colnames(HousePrices2020)
colnames(HousePrices2023) <- colnames(HousePrices2020)
colnames(HousePrices2024) <- colnames(HousePrices2020)
HousePrices <- bind_rows(
HousePrices2020,
HousePrices2021,
HousePrices2022,
HousePrices2023,
HousePrices2024
)
colnames(HousePrices2020)
cleanHousePrices <- HousePrices %>%
filter(county == "SOUTH YORKSHIRE" | county == "WEST YORKSHIRE") %>%
mutate(
shortPostcode = str_trim(substr(postcode, 1, 4)),
Year = substr(date_of_transfer, 1, 4)
) %>%
arrange(county) %>%
select(postcode, shortPostcode, price, Year, property_type,district, county)
cleanHousePrices %>%
mutate(Year = as.numeric(Year)) %>%
summarise(correlation = cor(price, Year, use = "complete.obs"))
colnames(HousePrices2020)
cleanHousePrices <- HousePrices %>%
filter(county == "SOUTH YORKSHIRE" | county == "WEST YORKSHIRE") %>%
mutate(
shortPostcode = str_trim(substr(postcode, 1, 4)),
Year = substr(date_of_transfer, 1, 4)
) %>%
arrange(county) %>%
select(postcode, shortPostcode, price, Year, property_type,district, county)
View(HousePrices)
View(HousePrices2020)
library(tidyverse)
library(ggplot2)
HousePrices2020 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2020.csv", col_names = FALSE)
HousePrices2021 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2021.csv", col_names = FALSE)
HousePrices2022 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2022.csv", col_names = FALSE)
HousePrices2023 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2023.csv", col_names = FALSE)
HousePrices2024 = read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\pp-2024.csv", col_names = FALSE)
colnames(HousePrices2020) <- c(
"transaction_id", "price", "date_of_transfer", "postcode",
"property_type", "old_new", "duration", "paon", "saon", "street",
"locality", "town_city", "district", "county", "ppd_category", "record_status"
)
# Assign the same column names to the rest
colnames(HousePrices2021) <- colnames(HousePrices2020)
colnames(HousePrices2022) <- colnames(HousePrices2020)
colnames(HousePrices2023) <- colnames(HousePrices2020)
colnames(HousePrices2024) <- colnames(HousePrices2020)
HousePrices <- bind_rows(
HousePrices2020,
HousePrices2021,
HousePrices2022,
HousePrices2023,
HousePrices2024
)
colnames(HousePrices2020)
cleanHousePrices <- HousePrices %>%
filter(county == "SOUTH YORKSHIRE" | county == "WEST YORKSHIRE") %>%
mutate(
shortPostcode = str_trim(substr(postcode, 1, 4)),
Year = substr(date_of_transfer, 1, 4)
) %>%
arrange(county) %>%
select(postcode, shortPostcode, price, Year, property_type,district, county)
dir.create("Cleaned Data", showWarnings = FALSE)
write.csv(cleanHousePrices, "Cleaned Data/cleanHousePrices.csv", row.names = FALSE)
View(cleanHousePrices)
colnames(HousePrices)
#test relationships between price and variables like year, property type, and district.
#Correlation: Price vs Year (numeric)
cleanHousePrices %>%
mutate(Year = as.numeric(Year)) %>%
summarise(correlation = cor(price, Year, use = "complete.obs"))
#ANOVA: Is Price significantly different across property_type?
anova_result <- aov(price ~ property_type, data = cleanHousePrices)
summary(anova_result)
#Multiple Linear Regression
lm_model <- lm(price ~ as.factor(Year) + district + property_type, data = cleanHousePrices)
summary(lm_model)
#Recommend Affordable Districts
recommend_districts("2023", "T", 200000)
library(tidyverse)
library(janitor)
library(dplyr)
library(corrplot)
unzip("C:/Users/Sujal/OneDrive/Documents/R lab/data science project/downlode the datasets/Performancetables_082927.zip", exdir = "unzipped_2021")
csv_2021 <- list.files("unzipped_2021", pattern = "england_ks4final\\.csv$", full.names = TRUE, recursive = TRUE)
SchoolPerformance2021 <- read_csv(csv_2021)
unzip("C:/Users/Sujal/OneDrive/Documents/R lab/data science project/downlode the datasets/Performancetables_081208.zip", exdir = "unzipped_2022")
csv_2022 <- list.files("unzipped_2022", pattern = "england_ks4final\\.csv$", full.names = TRUE, recursive = TRUE)
SchoolPerformance2022 <- read_csv(csv_2022)
unzip("C:/Users/Sujal/OneDrive/Documents/R lab/data science project/downlode the datasets/Performancetables_081807.zip", exdir = "unzipped_2023")
csv_2023 <- list.files("unzipped_2023", pattern = "england_ks4final\\.csv$", full.names = TRUE, recursive = TRUE)
SchoolPerformance2023 <- read_csv(csv_2023)
unzip("C:/Users/Sujal/OneDrive/Documents/R lab/data science project/downlode the datasets/Performancetables_081859.zip", exdir = "unzipped_2024")
csv_2024 <- list.files("unzipped_2024", pattern = "england_ks4final\\.csv$", full.names = TRUE, recursive = TRUE)
SchoolPerformance2024 <- read_csv(csv_2024)
# --- STEP 2: Add year and convert all columns to character ---
SchoolPerformance2021 <- SchoolPerformance2021 %>% mutate(across(everything(), as.character), year = "2021")
SchoolPerformance2022 <- SchoolPerformance2022 %>% mutate(across(everything(), as.character), year = "2022")
SchoolPerformance2023 <- SchoolPerformance2023 %>% mutate(across(everything(), as.character), year = "2023")
SchoolPerformance2024 <- SchoolPerformance2024 %>% mutate(across(everything(), as.character), year = "2024")
# --- STEP 3: Bind rows and clean column names ---
SchoolPerformance <- bind_rows(
SchoolPerformance2021,
SchoolPerformance2022,
SchoolPerformance2023,
SchoolPerformance2024
) # After binding all years' data into SchoolPerformance:
SchoolPerformance <- SchoolPerformance %>% clean_names()
# Then your filtering and cleaning:
cleanSchoolPerformance <- SchoolPerformance %>%
filter(lea %in% c("370", "371", "372", "373",   # South Yorkshire
"380", "381", "382", "383", "384")) %>%
mutate(
att8scr = na_if(att8scr, "SUP"),
att8scr = na_if(att8scr, "NE"),
att8scr = as.numeric(att8scr),
p8mea = na_if(p8mea, "SUP"),
p8mea = na_if(p8mea, "NE"),
p8mea = as.numeric(p8mea),
year = as.integer(year),
lea = as.factor(lea),
schname = as.factor(schname)
) %>%
filter(!is.na(att8scr), !is.na(p8mea)) %>%
rename(
school_name = schname,
postcode = pcode,
district_code = lea,
progress8_score = p8mea,
attainment8_score = att8scr
)
# Create output folder if not exists
dir.create("Cleaned Data", showWarnings = FALSE)
# Save cleaned data to CSV
write_csv(cleanSchoolPerformance, "Cleaned Data/finalSchoolPerformance.csv")
# --- STEP 8: View cleaned data ---
View(cleanSchoolPerformance)
#Sample R code for recommendation system:
# Calculate thresholds
att8_mean <- mean(cleanSchoolPerformance$attainment8_score, na.rm = TRUE)
p8_mean <- mean(cleanSchoolPerformance$progress8_score, na.rm = TRUE)
# Flag schools with good performance
recommendations <- cleanSchoolPerformance %>%
mutate(
att8_flag = attainment8_score >= att8_mean,
p8_flag = progress8_score > 0,
recommended = att8_flag & p8_flag
) %>%
filter(recommended) %>%
arrange(district_code, desc(attainment8_score))
# View recommended schools per district
recommendations %>%
select(school_name, district_code, attainment8_score, progress8_score) %>%
group_by(district_code) %>%
slice_max(order_by = attainment8_score, n = 5) %>%  # Top 5 schools per district
ungroup()
# --- 1. Correlation between attainment8_score and progress8_score ---
correlation <- cor(cleanSchoolPerformance$attainment8_score, cleanSchoolPerformance$progress8_score, use = "complete.obs")
cat("Correlation between Attainment 8 and Progress 8:", correlation, "\n")
# --- 2. Summary statistics by district ---
district_summary <- cleanSchoolPerformance %>%
group_by(district_code) %>%
summarise(
mean_attainment8 = mean(attainment8_score, na.rm = TRUE),
mean_progress8 = mean(progress8_score, na.rm = TRUE),
count = n()
)
print(district_summary)
# --- 3. ANOVA: Does attainment8_score differ by district? ---
anova_attainment <- aov(attainment8_score ~ district_code, data = cleanSchoolPerformance)
summary(anova_attainment)
# ANOVA: Does progress8_score differ by district?
anova_progress <- aov(progress8_score ~ district_code, data = cleanSchoolPerformance)
summary(anova_progress)
# --- 4. Visualization: Trends over years by district ---
ggplot(cleanSchoolPerformance, aes(x = year, y = attainment8_score, color = district_code, group = district_code)) +
stat_summary(fun = mean, geom = "line", size = 1.2) +
stat_summary(fun = mean, geom = "point", size = 2) +
labs(title = "Average Attainment 8 Score Over Years by District",
x = "Year",
y = "Average Attainment 8 Score",
color = "District") +
theme_minimal()
ggplot(cleanSchoolPerformance, aes(x = year, y = progress8_score, color = district_code, group = district_code)) +
stat_summary(fun = mean, geom = "line", size = 1.2) +
stat_summary(fun = mean, geom = "point", size = 2) +
labs(title = "Average Progress 8 Score Over Years by District",
x = "Year",
y = "Average Progress 8 Score",
color = "District") +
theme_minimal()
# --- 5. Optional: Correlation matrix plot of key numeric variables ---
numeric_vars <- cleanSchoolPerformance %>%
select(attainment8_score, progress8_score, year) %>%
drop_na()
cor_matrix <- cor(numeric_vars)
print(cor_matrix)
corrplot(cor_matrix, method = "circle")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(fmsb)      # for radar chart
library(scales)
# Read all four files
south_street <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-south-yorkshire-street.csv")
south_outcomes <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-south-yorkshire-outcomes.csv")
west_street <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-west-yorkshire-street.csv")
west_outcomes <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-west-yorkshire-outcomes.csv")
# Add County column
south_street   <- south_street   %>% mutate(County = "SOUTH YORKSHIRE")
south_outcomes <- south_outcomes %>% mutate(County = "SOUTH YORKSHIRE")
west_street    <- west_street    %>% mutate(County = "WEST YORKSHIRE")
west_outcomes  <- west_outcomes  %>% mutate(County = "WEST YORKSHIRE")
# Merge street and outcome data
south_combined <- left_join(south_street, south_outcomes, by = "Crime ID")
west_combined  <- left_join(west_street,  west_outcomes,  by = "Crime ID")
# Combine both counties
crime_data <- bind_rows(south_combined, west_combined)
# Clean and transform the dataset
clean_crime_data <- crime_data %>%
select(
`Crime ID`,
Month = Month.x,
district = Location.x,        # 👈 Rename Location.x to 'district', but keep original values
`Crime type`,
Longitude = Longitude.x,
Latitude = Latitude.x,
`Outcome type`,
County = County.x
) %>%
filter(!is.na(`Crime ID`)) %>%
mutate(
shortPostcode = str_trim(str_extract(district, "[A-Z]{1,2}[0-9R][0-9A-Z]?")),
Year = substr(Month, 1, 4)
)
# Save to CSV
dir.create("Cleaned Data", showWarnings = FALSE)
write_csv(clean_crime_data, "Cleaned Data/cleanCrimeData.csv")
# View the final cleaned dataset
View(clean_crime_data)
# 1. Count Total Crimes by County and Year
crime_by_county_year <- clean_crime_data %>%
group_by(County, Year) %>%
summarise(TotalCrimes = n(), .groups = 'drop')
# 2. Top Crime Types per County
top_crime_types <- clean_crime_data %>%
group_by(County, `Crime type`) %>%
summarise(CrimeCount = n(), .groups = 'drop') %>%
arrange(County, desc(CrimeCount))
# 3. Crime Rate by District
crime_by_district <- clean_crime_data %>%
group_by(County, district) %>%
summarise(TotalCrimes = n(), .groups = 'drop') %>%
arrange(desc(TotalCrimes))
# 4. Filter Drug-related Crimes for Scoring
drug_crime_rate <- clean_crime_data %>%
filter(`Crime type` == "Drugs") %>%
group_by(County, district) %>%
summarise(DrugCrimes = n(), .groups = 'drop')
# 5. Calculate Drug Crime Score (0-1 scale, inverted so more crime = lower score)
drug_crime_rate <- drug_crime_rate %>%
mutate(DrugCrimeScore = 1 - (DrugCrimes - min(DrugCrimes)) / (max(DrugCrimes) - min(DrugCrimes)))
# 6. View districts sorted by safest (highest DrugCrimeScore)
top_safe_districts <- drug_crime_rate %>%
arrange(desc(DrugCrimeScore))
View(crime_by_county_year)
# 1. Count Total Crimes by County and Year
crime_by_county_year <- clean_crime_data %>%
group_by(County, Year) %>%
summarise(TotalCrimes = n(), .groups = 'drop')
# 2. Top Crime Types per County
top_crime_types <- clean_crime_data %>%
group_by(County, `Crime type`) %>%
summarise(CrimeCount = n(), .groups = 'drop') %>%
arrange(County, desc(CrimeCount))
# 1. Count Total Crimes by County and Year
crime_by_county_year <- clean_crime_data %>%
group_by(County, Year) %>%
summarise(TotalCrimes = n(), .groups = 'drop')
# Read all four files
south_street <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-south-yorkshire-street.csv")
south_outcomes <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-south-yorkshire-outcomes.csv")
west_street <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-west-yorkshire-street.csv")
west_outcomes <- read_csv("C:\\Users\\Sujal\\OneDrive\\Documents\\R lab\\data science project\\downlode the datasets\\2022-05-west-yorkshire-outcomes.csv")
# Add County column
south_street   <- south_street   %>% mutate(County = "SOUTH YORKSHIRE")
south_outcomes <- south_outcomes %>% mutate(County = "SOUTH YORKSHIRE")
west_street    <- west_street    %>% mutate(County = "WEST YORKSHIRE")
west_outcomes  <- west_outcomes  %>% mutate(County = "WEST YORKSHIRE")
# Merge street and outcome data
south_combined <- left_join(south_street, south_outcomes, by = "Crime ID")
west_combined  <- left_join(west_street,  west_outcomes,  by = "Crime ID")
# Combine both counties
crime_data <- bind_rows(south_combined, west_combined)
# Clean and transform the dataset
clean_crime_data <- crime_data %>%
select(
`Crime ID`,
Month = Month.x,
district = Location.x,        # 👈 Rename Location.x to 'district', but keep original values
`Crime type`,
Longitude = Longitude.x,
Latitude = Latitude.x,
`Outcome type`,
County = County.x
) %>%
filter(!is.na(`Crime ID`)) %>%
mutate(
shortPostcode = str_trim(str_extract(district, "[A-Z]{1,2}[0-9R][0-9A-Z]?")),
Year = substr(Month, 1, 4)
)
# Save to CSV
dir.create("Cleaned Data", showWarnings = FALSE)
write_csv(clean_crime_data, "Cleaned Data/cleanCrimeData.csv")
# 3. Investigate statistical relationships
# Example: Correlation between Drug Crimes and Total Crimes per district
drug_crime_rate <- crime_data_model %>%
filter(`Crime type` == "Drugs") %>%
group_by(County, district) %>%
summarise(DrugCrimes = n(), .groups = 'drop')
# 3. Investigate statistical relationships
# Example: Correlation between Drug Crimes and Total Crimes per district
drug_crime_rate <- crime_data %>%
filter(`Crime type` == "Drugs") %>%
group_by(County, district) %>%
summarise(DrugCrimes = n(), .groups = 'drop')
# Assume clean_crime_data is already loaded and cleaned
# 1. Create uniform data model (select and rename columns if needed)
crime_data_model <- clean_crime_data %>%
select(County, Year, district, `Crime type`) %>%
mutate(
County = str_to_title(County),
district = str_to_title(district),
`Crime type` = str_to_title(`Crime type`)
)
# 2. Exploratory Data Analysis (EDA)
# Summary statistics
summary(crime_data_model)
# Count crimes by County and Year (trend)
crime_by_county_year <- crime_data_model %>%
group_by(County, Year) %>%
summarise(TotalCrimes = n(), .groups = 'drop')
# View top crime types per County
top_crime_types <- crime_data_model %>%
group_by(County, `Crime type`) %>%
summarise(CrimeCount = n(), .groups = 'drop') %>%
arrange(County, desc(CrimeCount))
# Crime counts by district
crime_by_district <- crime_data_model %>%
group_by(County, district) %>%
summarise(TotalCrimes = n(), .groups = 'drop') %>%
arrange(desc(TotalCrimes))
# 3. Investigate statistical relationships
# Example: Correlation between Drug Crimes and Total Crimes per district
drug_crime_rate <- crime_data_model %>%
filter(`Crime type` == "Drugs") %>%
group_by(County, district) %>%
summarise(DrugCrimes = n(), .groups = 'drop')
total_crime_rate <- crime_data_model %>%
group_by(County, district) %>%
summarise(TotalCrimes = n(), .groups = 'drop')
crime_rates_combined <- left_join(total_crime_rate, drug_crime_rate, by = c("County", "district")) %>%
replace_na(list(DrugCrimes = 0))
correlation <- cor(crime_rates_combined$TotalCrimes, crime_rates_combined$DrugCrimes)
print(paste("Correlation between Total Crimes and Drug Crimes:", round(correlation, 3)))
# 4. Build a simple recommendation system based on Drug Crime Score (lower drug crime → higher score)
crime_rates_combined <- crime_rates_combined %>%
mutate(DrugCrimeScore = 1 - (DrugCrimes - min(DrugCrimes)) / (max(DrugCrimes) - min(DrugCrimes)))
# View safest districts based on Drug Crime Score
top_safe_districts <- crime_rates_combined %>%
arrange(desc(DrugCrimeScore))
# 5. Save recommendation table
write_csv(top_safe_districts, "Cleaned Data/drugCrimeRecommendation.csv")
# Optional: View top safe districts
print(head(top_safe_districts, 10))
